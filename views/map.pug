head
    title SpotHunter
    // bootstrap
    link(rel='stylesheet' href='https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css' integrity='sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB' crossorigin='anonymous')
    script(src='https://code.jquery.com/jquery-3.3.1.slim.min.js' integrity='sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo' crossorigin='anonymous')
    script(src='https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js' integrity='sha384-smHYKdLADwkXOn1EmN1qk/HfnUcbVRZyYmZ4qpPea6sjB/pTJ0euyQp0Mk8ck+5T' crossorigin='anonymous')
    // LEAFLET
    link(rel='stylesheet' href='https://unpkg.com/leaflet@1.3.1/dist/leaflet.css' integrity='sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ==' crossorigin='')
    script(src='https://unpkg.com/leaflet@1.3.1/dist/leaflet.js' integrity='sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw==' crossorigin='')
    // LOCAL FILES
    link(rel='stylesheet' href='/stylesheets/map.css')
    script(src='/scripts/scripts.js')
    // FONT AWESOME AND FILES
    link(rel='stylesheet' href='https://use.fontawesome.com/releases/v5.1.0/css/all.css' integrity='sha384-lKuwvrZot6UHsBSfcMvOkWwlCMgc0TaWr+30HWe3a4ltaBwTZhyTEggF5tJv8tbt' crossorigin='anonymous')
    link(href='https://fonts.googleapis.com/css?family=Comfortaa' rel='stylesheet')
    script(src='https://code.jquery.com/jquery-3.3.1.min.js' integrity='sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=' crossorigin='anonymous')


block content
header
    nav#navBar.navbar.navbar-expand-lg.navbar-light.bg-light
        // <a class="navbar-brand" href="#">Navbar</a>
        img#title(src='./images/vect.png')
        button.navbar-toggler(type='button' data-toggle='collapse' data-target='#navbarNavDropdown' aria-controls='navbarNavDropdown' aria-expanded='false' aria-label='Toggle navigation')
            span.navbar-toggler-icon
        #navbarNavDropdown.collapse.navbar-collapse
            ul.navbar-nav
                li.nav-item
                    a.nav-link(href='#')
                        | Home
                        span.sr-only (current)
                li.nav-item
                    a.nav-link(href='#') Features
                li.nav-item
                    a.nav-link(href='#') Prices
                li.nav-item
                    if currentUser
                        a.nav-link(href='/logout') Log Out


        form.form-inline.my-2.my-lg-0
            ul
                li.nav-item.dropdown
                    a#navbarDropdownMenuLink.nav-link.dropdown-toggle.mr-sm-2(href='#' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false')
                        | Dropdown link
                    .dropdown-menu(aria-labelledby='navbarDropdownMenuLink')
                        a.dropdown-item(href='#') Action
                        a.dropdown-item(href='#') Another action
                        a.dropdown-item(href='#') Something else here
                        a.dropdown-item(onclick='toggleNav() ' href='#') Drop A marker
                        a#locate-position.dropdown-item(href='#')  Current Positon

#map
#mySidenav.sidenav
    button.close(type='button' onclick='closeNav()') &times;
    img.placeholders(src='images/vect.png')
    ul
        p
            | Choose an Icon that represents the spot you found, then tap anywhere on the map to place it!
        li#hRail(data-title='icons')
            img.icon(src='images/handrail.png')
        li#shop(data-title='icons')
            img.icon(src='images/shop.png')
        li#bench(data-title='icons')
            img.icon(src='images/bench.png')
        li#stairs(data-title='icons')
            img.icon(src='images/stairs.png')
        li#sPark(data-title='icons')
            img.icon(src='images/park.png')
        li#hPipe(data-title='icons')
            img.icon(src='images/halfPipe.png')
    script.

      var mapOptions = {
        center: [17.342761, 78.552432],
        zoom: 5
      }



      var locations = L.layerGroup();
        L.marker([30.45672010958028, -97.78756856918335]).bindPopup("Jongers Barracks").addTo(locations),
        L.marker([30.38957219379311, -97.88230419158936]).bindPopup('The land of Laur').addTo(locations),
        L.marker([30.26593619644542, -97.75179862976074]).bindPopup('The enchanted Hall of Ideas').addTo(locations),
        L.marker([30.421602277410972, -97.84548282623291]).bindPopup('The grinding wheel').addTo(locations);


      var mbAttr = 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
        '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
        'Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
        mbUrl = 'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';
      mbUrl1 = 'https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.png';

      //tutorial
      $.getJSON('/maplayers', function (result) {
        $.each(result, function (i, mlayer) {
          $.getJSON('/mapjson/' + mlayer.name, function (data) {
            addLayer(data, mlayer.name)
          });
        });
      });

      var MarkerIcon = L.Icon.extend({
        options: {
          iconSize: [80, 80],
          iconAnchor: [22, 94],
          popupAnchor: [-3, -76],
          draggable: true
        }
      });
      var handRailIcon = new MarkerIcon({iconUrl: "images/handrail.png"});

      // L.icon = function (options) {
      //   return new L.icon(options)
      // }

      // views/map.pug part 3
      function addLayer(layer, name) {
        var leaf_layer;

        if (layer.type == "Point") {
          leaf_layer = L.geoJson(layer, {
            pointToLayer: function (feature, latlng) {
              return L.marker(latlng, {icon: handRailIcon});
            }
          })
          leaf_layer.bindPopup("Hi Laur! ");
          //Coors Field

        }else if (layer.type == "MultiLineString") {
          leaf_layer = L.geoJson(layer, {style: layer.style});
          leaf_layer.bindPopup(layer.type);
        } else {
          leaf_layer = L.geoJson(layer, {
            style: function (feature) {
              switch (feature.properties.style) {
                case 'Orange':
                  return {color: "#ff0000"};
                case 'Blue':
                  return {color: "#0000ff"};
              }
            },
            onEachFeature: function (feature, layer) {
              layer.bindPopup(feature.properties.name);
            }
          });
        }
        leaf_layer.addTo(map);

        $('#' + name).click(function (e) {

          if (map.hasLayer(leaf_layer)) {
            map.removeLayer(leaf_layer);
          } else {
            map.addLayer(leaf_layer);
          }
        });
      }
      //end tutorial

      var grayscale = L.tileLayer(mbUrl, {id: 'mapbox.light', attribution: mbAttr}),
        streets = L.tileLayer(mbUrl, {id: 'mapbox.streets', attribution: mbAttr});
        waterColor = L.tileLayer(mbUrl1);


      var map = L.map('map', {
        // center: [39.73, -104.99],
        zoom: 16,
        layers: [grayscale, locations],
        mapOptions
      }).setView([30.27344, -97.7431], 5);


      var baseLayers = {
        "Grayscale": grayscale,
        "Streets": streets,
        "Water": waterColor,
      };

      var overlays = {
        "Locations": locations
      };

      // var videoElement = videoOverlay.getElement();
      // var map = L.map('map').setView([37, -97.7431], 6).addLayer(osm);


      $('.icon').click(function (e) {
        console.log($(this).attr('src'));
        iconPath = $(this).attr('src');
        theIcon = L.icon({
          iconUrl: iconPath,
          iconSize: [80, 80], // size of the icon
          iconAnchor: [22, 94], // point of the icon which will correspond to marker's location
          popupAnchor: [-3, -76],
          draggable: true // point from which the popup should open relative to the iconAnchor
        })
        geojsonFeature.properties.thisIcon.push(iconPath)
        console.log(iconPath)
      });

      $('.icon').click(function (e) {
        console.log()
      });

      function onMapClick(e) {
        let userMarkers = [];
        console.log("youclicked")
        let marker = L.marker(e.latlng, {
          icon: theIcon,
          draggable: true

        }).addTo(map).bindPopup("<form id='popupForm' method='POST' action='/spotForm'> <div class='form-group'><label for='spotName'>Name</label><input type='text'class='form-control' id='spotName' placeholder='Name this spot!' name='spotName'></div><div class='form-group'><label for='coordinates'>Turn on location coordinates</label><input type='text' class='coordinates' id='coordinates' name='coordinates'> <div class='btn-group-toggle' data-toggle='buttons'><label class='btn btn-secondary active'><input class='cords' type='checkbox' checked autocomplete='on'> Checked</label></div><small id='' class='form-text text-muted'>This will generate latlng position of this marker. use this to share between map platforms</small></div><div class='form-group'><label for='comment'></label>Leave a comment about this spot<textarea class='form-control' rows='5'id='comment' placeholder='This spot....' name='comment'></textarea></div><div class='form-group'><label for='pics'>Add some pics</label><button class='form-control' id='pics' onclick='' name='pics'></button></div><div class='form-group'>User<label for='spotUser'></label><input type='text' class='form-control' id='spotUser' placeholder='Leave your userName here' name='spotUser'></div><button type='submit' class='btn btn-primary'>Add Spot Data</button></form>")
        // $('.cords').click(function(){alert('hi')}));
        geojsonFeature.geometry.coordinates.push(e.latlng);
        console.log(geojsonFeature, "hi");
        // $('.cords').click(function(){
        // if(!$('.cords').prop('checked'))
        // console.log('box checked')
        // document.getElementById('location').innerHTML += "hihihihiihih";
        // })
      }

      map.on('click', onMapClick);
      L.control.layers(baseLayers, overlays).addTo(map);
      map.on('popupopen', function (e) {
        var latLng = e["popup"]._latlng;
        var form = document.querySelector('#popupForm');
        form['coordinates'].value = latLng['lat'] + ', ' + latLng['lng'];
      });


      function toggleNav() {
        var element = document.getElementById("mySidenav");
        if (element.style.width == "250px") {
          element.style.width = "0px";
        } else {
          element.style.width = "250px";
        }
      }
      function openNav() {
        document.getElementById("mySidenav").style.width = "250px";
      }
      function closeNav() {
        document.getElementById("mySidenav").style.width = "0";
      }










